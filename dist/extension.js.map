{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://express-jet/external commonjs \"path\"","webpack://express-jet/./src/extension.ts","webpack://express-jet/external commonjs \"fs\"","webpack://express-jet/external commonjs \"vscode\"","webpack://express-jet/webpack/bootstrap","webpack://express-jet/webpack/startup"],"sourcesContent":["module.exports = require(\"path\");","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('expressjet.createBoilerplate', async () => {\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n\n        if (!workspaceFolders || workspaceFolders.length === 0) {\n            vscode.window.showErrorMessage('No folder is open in the current VS Code window.');\n            return;\n        }\n\n        const rootPath = workspaceFolders[0].uri.fsPath;\n\n        // --- Step 1: Prompt for Project Name ---\n        const projectName = await vscode.window.showInputBox({\n            prompt: 'Enter your project name (e.g., \"my-api-backend\")',\n            placeHolder: 'my-express-app',\n            value: path.basename(rootPath) // Suggest current folder name as default\n        });\n\n        if (!projectName) {\n            vscode.window.showInformationMessage('Boilerplate generation cancelled. Project name is required.');\n            return;\n        }\n\n        // --- Step 2: Prompt for Package Manager ---\n        const packageManager = await vscode.window.showQuickPick(['npm', 'yarn'], {\n            placeHolder: 'Choose your preferred package manager',\n            canPickMany: false\n        });\n\n        if (!packageManager) {\n            vscode.window.showInformationMessage('Boilerplate generation cancelled. Package manager choice is required.');\n            return;\n        }\n\n        // --- Step 3: Prompt for ES Modules vs CommonJS ---\n        const moduleSystem = await vscode.window.showQuickPick(['CommonJS (require/module.exports)', 'ES Modules (import/export)'], {\n            placeHolder: 'Choose your module system',\n            canPickMany: false\n        });\n\n        if (!moduleSystem) {\n            vscode.window.showInformationMessage('Boilerplate generation cancelled. Module system choice is required.');\n            return;\n        }\n\n        const useESModules = moduleSystem === 'ES Modules (import/export)';\n        const fileExtension = useESModules ? 'mjs' : 'js';\n        const packageJsonType = useESModules ? '\"type\": \"module\",' : '';\n\n        // --- Prompt for Authentication ---\n        const includeAuth = await vscode.window.showQuickPick(['Yes', 'No'], {\n            placeHolder: 'Include Authentication (Email/Password with JWT)?',\n            canPickMany: false\n        });\n\n        if (includeAuth === undefined) {\n            vscode.window.showInformationMessage('Boilerplate generation cancelled. Authentication choice is required.');\n            return;\n        }\n        const withAuth = includeAuth === 'Yes';\n\n        const srcPath = path.join(rootPath, 'src');\n\n        const folders = [\n            'src',\n            'src/config',\n            'src/controllers',\n            'src/models',\n            'src/routes',\n            'src/middlewares',\n            'src/utils'\n        ];\n\n        const createFolders = () => {\n            folders.forEach(folder => fs.mkdirSync(path.join(rootPath, folder), { recursive: true }));\n        };\n\n        const createFiles = () => {\n            // --- app.js/app.mjs content (now exports the app) ---\n            const appJsContent = useESModules ? `\nimport express from 'express';\nimport exampleRoute from './routes/example.route.${fileExtension}';\n${withAuth ? `import authRoute from './routes/auth.route.${fileExtension}';` : ''}\n\nconst app = express();\n\napp.use(express.json());\n\n// Main routes\napp.use('/api/example', exampleRoute);\n${withAuth ? `app.use('/api/auth', authRoute);` : ''}\n\napp.get('/', (req, res) => {\n    res.send('API is running...');\n});\n\nexport default app;\n`.trim() : `\nconst express = require('express');\nconst exampleRoute = require('./routes/example.route');\n${withAuth ? `const authRoute = require('./routes/auth.route');` : ''}\n\nconst app = express();\n\napp.use(express.json());\n\n// Main routes\napp.use('/api/example', exampleRoute);\n${withAuth ? `app.use('/api/auth', authRoute);` : ''}\n\napp.get('/', (req, res) => {\n    res.send('API is running...');\n});\n\nmodule.exports = app;\n`.trim();\n            fs.writeFileSync(path.join(srcPath, `app.${fileExtension}`), appJsContent);\n\n            // --- NEW: server.js/server.mjs content (in root) ---\n            const serverJsContent = useESModules ? `\nimport app from './src/app.${fileExtension}';\nimport dotenv from 'dotenv';\nimport connectDB from './src/config/db.${fileExtension}';\n\ndotenv.config();\n\nconst PORT = process.env.PORT || 5000;\n\n// Connect to database\nconnectDB();\n\nconst server = app.listen(PORT, () => {\n    console.log(\\`Server running on port \\${PORT}\\`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (err, promise) => {\n    console.log(\\`Error: \\${err.message}\\`);\n    // Close server & exit process\n    server.close(() => process.exit(1));\n});\n`.trim() : `\nconst app = require('./src/app');\nconst dotenv = require('dotenv');\nconst connectDB = require('./src/config/db');\n\ndotenv.config();\n\nconst PORT = process.env.PORT || 5000;\n\n// Connect to database\nconnectDB();\n\nconst server = app.listen(PORT, () => {\n    console.log(\\`Server running on port \\${PORT}\\`);\n});\n\n// Handle unhandled promise rejections\nprocess.on('unhandledRejection', (err, promise) => {\n    console.log(\\`Error: \\${err.message}\\`);\n    // Close server & exit process\n    server.close(() => process.exit(1));\n});\n`.trim();\n            fs.writeFileSync(path.join(rootPath, `server.${fileExtension}`), serverJsContent);\n\n            // --- db.js/db.mjs content ---\n            // No change needed here, it remains in src/config and just handles the DB connection\n            const dbJsContent = useESModules ? `\nimport mongoose from 'mongoose';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGO_URI);\n        console.log('MongoDB Connected');\n    } catch (err) {\n        console.error(err.message);\n        process.exit(1);\n    }\n};\n\nexport default connectDB;\n`.trim() : `\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGO_URI);\n        console.log('MongoDB Connected');\n    } catch (err) {\n        console.error(err.message);\n        process.exit(1);\n    }\n};\n\nmodule.exports = connectDB;\n`.trim();\n            fs.writeFileSync(path.join(srcPath, 'config', `db.${fileExtension}`), dbJsContent);\n\n            // --- .env content ---\n            const envContent = `PORT=5000\\nMONGO_URI=mongodb://localhost:27017/${projectName.toLowerCase().replace(/\\s/g, '-')}-db${withAuth ? `\\nJWT_SECRET=YOUR_SUPER_SECRET_KEY\\nJWT_EXPIRES_IN=1h` : ''}`;\n            fs.writeFileSync(path.join(rootPath, '.env'), envContent);\n\n            // --- .gitignore content ---\n            const gitignoreContent = `node_modules/\\n.env\\n.vscode/\\nbuild/`;\n            fs.writeFileSync(path.join(rootPath, '.gitignore'), gitignoreContent);\n\n            // --- README.md content (for generated project) ---\n            const readmeContent = `\n# ${projectName} - Express + MongoDB Boilerplate\n\n## 🔧 Installation\n\n\\`\\`\\`bash\n${packageManager} install\n\\`\\`\\`\n\n## 🚀 Run the server\n\n\\`\\`\\`bash\n${packageManager === 'npm' ? 'npm run dev' : 'yarn dev'}\n\\`\\`\\`\n\n## 📁 Folder Structure\n\n- \\`server.${fileExtension}\\`: Main server entry point\n- \\`src/config\\`: Database configuration\n- \\`src/controllers\\`: Contains business logic for routes\n- \\`src/models\\`: Mongoose schemas and models\n- \\`src/routes\\`: API routes definitions\n- \\`src/middlewares\\`: Custom Express middlewares\n- \\`src/utils\\`: Helper functions, error handling, etc.\n\n---\n\n## 💡 Quick Start Example\n\nThis boilerplate includes a basic example for a \"User\" resource.\n\n### Model: \\`src/models/User.model.${fileExtension}\\`\n\n\\`\\`\\`${useESModules ? 'js' : 'javascript'}\n${useESModules ? `import mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';` : `const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');`}\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    ${withAuth ? `password: {\n        type: String,\n        required: true,\n    },\n    role: {\n        type: String,\n        enum: ['user', 'admin'],\n        default: 'user',\n    },` : ''}\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\n${withAuth ? `\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n    if (!this.isModified('password')) {\n        next();\n    }\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n});\n\n// Compare password method\nuserSchema.methods.matchPassword = async function(enteredPassword) {\n    return await bcrypt.compare(enteredPassword, this.password);\n};\n\n// Generate JWT token\nuserSchema.methods.getSignedJwtToken = function() {\n    return jwt.sign({ id: this._id }, process.env.JWT_SECRET, {\n        expiresIn: process.env.JWT_EXPIRES_IN,\n    });\n};\n` : ''}\n\n${useESModules ? `export default mongoose.model('User', userSchema);` : `module.exports = mongoose.model('User', userSchema);`}\n\\`\\`\\`\n\n### Controller: \\`src/controllers/example.controller.${fileExtension}\\`\n\n\\`\\`\\`${useESModules ? 'js' : 'javascript'}\n${useESModules ? `import User from '../models/User.model.${fileExtension}';` : `const User = require('../models/User.model');`}\n\n${useESModules ? `export const getAllUsers = async (req, res) => {` : `exports.getAllUsers = async (req, res) => {`}\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\n${useESModules ? `export const createUser = async (req, res) => {` : `exports.createUser = async (req, res) => {`}\n    const { name, email ${withAuth ? ', password' : ''} } } = req.body;\n    try {\n        const newUser = new User({ name, email ${withAuth ? ', password' : ''} });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\\`\\`\\`\n\n### Route: \\`src/routes/example.route.${fileExtension}\\`\n\n\\`\\`\\`${useESModules ? 'js' : 'javascript'}\n${useESModules ? `import express from 'express';\nimport { getAllUsers, createUser } from '../controllers/example.controller.${fileExtension}';\n${withAuth ? `import { protect } from '../middlewares/auth.middleware.${fileExtension}';` : ''}` : `const express = require('express');\nconst { getAllUsers, createUser } = require('../controllers/example.controller');\n${withAuth ? `const { protect } = require('../middlewares/auth.middleware');` : ''}`}\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\n// Example of a protected route\n${withAuth ? `router.get('/protected-example', protect, (req, res) => {\n    res.json({ message: 'This is a protected route!', user: req.user });\n});` : ''}\n\n${useESModules ? `export default router;` : `module.exports = router;`}\n\\`\\`\\`\n\n${withAuth ? `\n## 🔐 Authentication (Email/Password with JWT)\n\nIf you chose to include authentication, your project is set up with:\n\n* **User Model:** Includes \\`email\\`, \\`password\\` (hashed), and \\`role\\` fields.\n* **Registration:** \\`POST /api/auth/register\\`\n* **Login:** \\`POST /api/auth/login\\`\n* **Token Generation:** JWTs are issued upon successful registration/login.\n* **Protected Routes:** A \\`protect\\` middleware to safeguard routes (e.g., \\`/api/example/protected-example\\`).\n\n### Authentication API Endpoints\n\n* **Register User:**\n    * \\`POST /api/auth/register\\`\n    * **Body:** \\`{ \"name\": \"...\", \"email\": \"...\", \"password\": \"...\" }\\`\n    * **Response:** JWT token and user details.\n\n* **Login User:**\n    * \\`POST /api/auth/login\\`\n    * **Body:** \\`{ \"email\": \"...\", \"password\": \"...\" }\\`\n    * **Response:** JWT token and user details.\n\n* **Access Protected Route (Example):**\n    * \\`GET /api/example/protected-example\\`\n    * **Headers:** \\`Authorization: Bearer <YOUR_JWT_TOKEN>\\`\n    * **Response:** Access granted message and user data.\n\n### Environment Variables for Auth\n\nMake sure to set these in your \\`.env\\` file:\n\n\\`\\`\\`\nJWT_SECRET=YOUR_SUPER_SECRET_KEY_REPLACE_THIS\nJWT_EXPIRES_IN=1h\n\\`\\`\\`\n` : ''}\n\n---\n\n## 🙏 Contribution & Support\n\nFound an issue or have a feature request? Feel free to open an issue or submit a pull request on our GitHub repository:\n\n* **Repository:** [https://github.com/IamNishant51/Backend-Folder-str-Generator](https://github.com/IamNishant51/Backend-Folder-str-Generator)\n* **Issues:** [https://github.com/IamNishant51/Backend-Folder-str-Generator/issues](https://github.com/IamNishant51/Backend-Folder-str-Generator/issues)\n\n## 📄 License\n\nThis extension is licensed under the ISC License.\n\n---\n\n**Crafted with 💖 by Nishant Unavane — The Web Architect**\n\n---\n`.trim();\n            fs.writeFileSync(path.join(rootPath, 'README.md'), readmeContent);\n\n            // --- package.json (for generated project) ---\n            let generatedPackageJsonDependencies = `\"dotenv\": \"^16.0.3\",\\n\\t\\t\"express\": \"^4.18.2\",\\n\\t\\t\"mongoose\": \"^7.6.0\"`;\n            let generatedPackageJsonDevDependencies = `\"nodemon\": \"^3.0.1\"`;\n\n            if (withAuth) {\n                generatedPackageJsonDependencies += `,\\n\\t\\t\"bcryptjs\": \"^2.4.3\",\\n\\t\\t\"jsonwebtoken\": \"^9.0.2\"`;\n            }\n\n            const packageJsonContent = `\n{\n    \"name\": \"${projectName.toLowerCase().replace(/\\s/g, '-')}\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A modern Express.js and MongoDB backend boilerplate.\",\n    ${packageJsonType}\n    \"main\": \"server.${fileExtension}\", \n    \"scripts\": {\n        \"start\": \"node server.${fileExtension}\", \n        \"dev\": \"nodemon server.${fileExtension}\" \n    },\n    \"keywords\": [\n        \"express\",\n        \"mongodb\",\n        \"boilerplate\",\n        \"api\"\n    ],\n    \"author\": \"Nishant — The Web Architect\",\n    \"license\": \"ISC\",\n    \"dependencies\": {\n        ${generatedPackageJsonDependencies}\n    },\n    \"devDependencies\": {\n        ${generatedPackageJsonDevDependencies}\n    }\n}\n`.trim();\n            fs.writeFileSync(path.join(rootPath, 'package.json'), packageJsonContent);\n\n            // --- Create example model, controller, route ---\n            // User.model.js/mjs (updated for auth) - No changes here from last version\n            const userModelContent = useESModules ? `\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    ${withAuth ? `password: {\n        type: String,\n        required: true,\n    },\n    role: {\n        type: String,\n        enum: ['user', 'admin'],\n        default: 'user',\n    },` : ''}\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\n${withAuth ? `\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n    if (!this.isModified('password')) {\n        next();\n    }\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n});\n\n// Compare password method\nuserSchema.methods.matchPassword = async function(enteredPassword) {\n    return await bcrypt.compare(enteredPassword, this.password);\n};\n\n// Generate JWT token\nuserSchema.methods.getSignedJwtToken = function() {\n    return jwt.sign({ id: this._id }, process.env.JWT_SECRET, {\n        expiresIn: process.env.JWT_EXPIRES_IN,\n    });\n};\n` : ''}\n\nexport default mongoose.model('User', userSchema);\n`.trim() : `\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    ${withAuth ? `password: {\n        type: String,\n        required: true,\n    },\n    role: {\n        type: String,\n        enum: ['user', 'admin'],\n        default: 'user',\n    },` : ''}\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\n${withAuth ? `\n// Hash password before saving\nuserSchema.pre('save', async function(next) {\n    if (!this.isModified('password')) {\n        next();\n    }\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n});\n\n// Compare password method\nuserSchema.methods.matchPassword = async function(enteredPassword) {\n    return await bcrypt.compare(enteredPassword, this.password);\n};\n\n// Generate JWT token\nuserSchema.methods.getSignedJwtToken = function() {\n    return jwt.sign({ id: this._id }, process.env.JWT_SECRET, {\n        expiresIn: process.env.JWT_EXPIRES_IN,\n    });\n};\n` : ''}\n\nmodule.exports = mongoose.model('User', userSchema);\n`.trim();\n            fs.writeFileSync(path.join(srcPath, 'models', `User.model.${fileExtension}`), userModelContent);\n\n            // example.controller.js/mjs - No changes here from last version\n            const exampleControllerContent = useESModules ? `\nimport User from '../models/User.model.${fileExtension}';\n\nexport const getAllUsers = async (req, res) => {\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\nexport const createUser = async (req, res) => {\n    const { name, email ${withAuth ? ', password' : ''} } = req.body;\n    try {\n        const newUser = new User({ name, email ${withAuth ? ', password' : ''} });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n`.trim() : `\nconst User = require('../models/User.model');\n\nexports.getAllUsers = async (req, res) => {\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\nexports.createUser = async (req, res) => {\n    const { name, email ${withAuth ? ', password' : ''} } = req.body;\n    try {\n        const newUser = new User({ name, email ${withAuth ? ', password' : ''} });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n`.trim();\n            fs.writeFileSync(path.join(srcPath, 'controllers', `example.controller.${fileExtension}`), exampleControllerContent);\n\n            // example.route.js/mjs - No changes here from last version\n            const exampleRouteContent = useESModules ? `\nimport express from 'express';\nimport { getAllUsers, createUser } from '../controllers/example.controller.${fileExtension}';\n${withAuth ? `import { protect } from '../middlewares/auth.middleware.${fileExtension}';` : ''}\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\n// Example of a protected route\n${withAuth ? `router.get('/protected-example', protect, (req, res) => {\n    res.json({ message: 'This is a protected route!', user: req.user });\n});` : ''}\n\nexport default router;\n`.trim() : `\nconst express = require('express');\nconst { getAllUsers, createUser } = require('../controllers/example.controller');\n${withAuth ? `const { protect } = require('../middlewares/auth.middleware');` : ''}\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\n// Example of a protected route\n${withAuth ? `router.get('/protected-example', protect, (req, res) => {\n    res.json({ message: 'This is a protected route!', user: req.user });\n});` : ''}\n\nmodule.exports = router;\n`.trim();\n            fs.writeFileSync(path.join(srcPath, 'routes', `example.route.${fileExtension}`), exampleRouteContent);\n\n            // Auth files (if withAuth is true) - No changes here from last version\n            if (withAuth) {\n                const authControllerContent = useESModules ? `\nimport User from '../models/User.model.${fileExtension}';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n\n// Helper function to send JWT token\nconst sendTokenResponse = (user, statusCode, res) => {\n    const token = user.getSignedJwtToken();\n    const options = {\n        expires: new Date(Date.now() + process.env.JWT_EXPIRES_IN * 24 * 60 * 60 * 1000), // Convert hours to ms\n        httpOnly: true // Prevent client-side JS from accessing token\n    };\n\n    res.status(statusCode).cookie('token', token, options).json({\n        success: true,\n        token,\n        user: {\n            id: user._id,\n            name: user.name,\n            email: user.email,\n            role: user.role\n        }\n    });\n};\n\n// @desc    Register user\n// @route   POST /api/auth/register\n// @access  Public\nexport const register = async (req, res) => {\n    const { name, email, password, role } = req.body;\n\n    try {\n        // Create user\n        const user = await User.create({\n            name,\n            email,\n            password,\n            role\n        });\n\n        sendTokenResponse(user, 200, res);\n\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ success: false, error: 'Server Error or User Exists' });\n    }\n};\n\n// @desc    Login user\n// @route   POST /api/auth/login\n// @access  Public\nexport const login = async (req, res) => {\n    const { email, password } = req.body;\n\n    // Validate email & password\n    if (!email || !password) {\n        return res.status(400).json({ success: false, error: 'Please enter an email and password' });\n    }\n\n    try {\n        // Check for user\n        const user = await User.findOne({ email }).select('+password'); // Select password explicitly\n\n        if (!user) {\n            return res.status(401).json({ success: false, error: 'Invalid credentials' });\n        }\n\n        // Check if password matches\n        const isMatch = await user.matchPassword(password);\n\n        if (!isMatch) {\n            return res.status(401).json({ success: false, error: 'Invalid credentials' });\n        }\n\n        sendTokenResponse(user, 200, res);\n\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ success: false, error: 'Server Error' });\n    }\n};\n\n// @desc    Get current logged in user\n// @route   GET /api/auth/me\n// @access  Private\nexport const getMe = async (req, res) => {\n    try {\n        // req.user is set by the protect middleware\n        const user = await User.findById(req.user.id);\n        res.status(200).json({\n            success: true,\n            user\n        });\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ success: false, error: 'Server Error' });\n    }\n};\n`.trim() : `\nconst User = require('../models/User.model');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\n// Helper function to send JWT token\nconst sendTokenResponse = (user, statusCode, res) => {\n    const token = user.getSignedJwtToken();\n    const options = {\n        expires: new Date(Date.now() + process.env.JWT_EXPIRES_IN * 24 * 60 * 60 * 1000), // Convert hours to ms\n        httpOnly: true // Prevent client-side JS from accessing token\n    };\n\n    res.status(statusCode).cookie('token', token, options).json({\n        success: true,\n        token,\n        user: {\n            id: user._id,\n            name: user.name,\n            email: user.email,\n            role: user.role\n        }\n    });\n};\n\n// @desc    Register user\n// @route   POST /api/auth/register\n// @access  Public\nexports.register = async (req, res) => {\n    const { name, email, password, role } = req.body;\n\n    try {\n        // Create user\n        const user = await User.create({\n            name,\n            email,\n            password,\n            role\n        });\n\n        sendTokenResponse(user, 200, res);\n\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ success: false, error: 'Server Error or User Exists' });\n    }\n};\n\n// @desc    Login user\n// @route   POST /api/auth/login\n// @access  Public\nexports.login = async (req, res) => {\n    const { email, password } = req.body;\n\n    // Validate email & password\n    if (!email || !password) {\n        return res.status(400).json({ success: false, error: 'Please enter an email and password' });\n    }\n\n    try {\n        // Check for user\n        const user = await User.findOne({ email }).select('+password'); // Select password explicitly\n\n        if (!user) {\n            return res.status(401).json({ success: false, error: 'Invalid credentials' });\n        }\n\n        // Check if password matches\n        const isMatch = await user.matchPassword(password);\n\n        if (!isMatch) {\n            return res.status(401).json({ success: false, error: 'Invalid credentials' });\n        }\n\n        sendTokenResponse(user, 200, res);\n\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ success: false, error: 'Server Error' });\n    }\n};\n\n// @desc    Get current logged in user\n// @route   GET /api/auth/me\n// @access  Private\nexports.getMe = async (req, res) => {\n    try {\n        // req.user is set by the protect middleware\n        const user = await User.findById(req.user.id);\n        res.status(200).json({\n            success: true,\n            user\n        });\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({ success: false, error: 'Server Error' });\n    }\n};\n`.trim();\n                fs.writeFileSync(path.join(srcPath, 'controllers', `auth.controller.${fileExtension}`), authControllerContent);\n\n                const authRouteContent = useESModules ? `\nimport express from 'express';\nimport { register, login, getMe } from '../controllers/auth.controller.${fileExtension}';\nimport { protect } from '../middlewares/auth.middleware.${fileExtension}';\n\nconst router = express.Router();\n\nrouter.post('/register', register);\nrouter.post('/login', login);\nrouter.get('/me', protect, getMe);\n\nexport default router;\n`.trim() : `\nconst express = require('express');\nconst { register, login, getMe } = require('../controllers/auth.controller');\nconst { protect } = require('../middlewares/auth.middleware');\n\nconst router = express.Router();\n\nrouter.post('/register', register);\nrouter.post('/login', login);\nrouter.get('/me', protect, getMe);\n\nmodule.exports = router;\n`.trim();\n                fs.writeFileSync(path.join(srcPath, 'routes', `auth.route.${fileExtension}`), authRouteContent);\n\n                const authMiddlewareContent = useESModules ? `\nimport jwt from 'jsonwebtoken';\nimport User from '../models/User.model.${fileExtension}';\n\n// Protect routes\nexport const protect = async (req, res, next) => {\n    let token;\n\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\n        // Set token from Bearer token in header\n        token = req.headers.authorization.split(' ')[1];\n    }\n    // Else if using cookies, uncomment below\n    // else if (req.cookies.token) {\n    //     token = req.cookies.token;\n    // }\n\n    // Make sure token exists\n    if (!token) {\n        return res.status(401).json({ success: false, error: 'Not authorized to access this route' });\n    }\n\n    try {\n        // Verify token\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n        req.user = await User.findById(decoded.id);\n\n        next();\n    } catch (err) {\n        return res.status(401).json({ success: false, error: 'Not authorized to access this route' });\n    }\n};\n\n// Grant access to specific roles\nexport const authorize = (...roles) => {\n    return (req, res, next) => {\n        if (!roles.includes(req.user.role)) {\n            return res.status(403).json({ success: false, error: \\`User role \\${req.user.role} is not authorized to access this route\\` });\n        }\n        next();\n    };\n};\n`.trim() : `\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User.model');\n\n// Protect routes\nexports.protect = async (req, res, next) => {\n    let token;\n\n    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {\n        // Set token from Bearer token in header\n        token = req.headers.authorization.split(' ')[1];\n    }\n    // Else if using cookies, uncomment below\n    // else if (req.cookies.token) {\n    //     token = req.cookies.token;\n    // }\n\n    // Make sure token exists\n    if (!token) {\n        return res.status(401).json({ success: false, error: 'Not authorized to access this route' });\n    }\n\n    try {\n        // Verify token\n        const decoded = jwt.verify(token, process.env.JWT_SECRET);\n\n        req.user = await User.findById(decoded.id);\n\n        next();\n    } catch (err) {\n        return res.status(401).json({ success: false, error: 'Not authorized to access this route' });\n    }\n};\n\n// Grant access to specific roles\nexports.authorize = (...roles) => {\n    return (req, res, next) => {\n        if (!roles.includes(req.user.role)) {\n            return res.status(403).json({ success: false, error: \\`User role \\${req.user.role} is not authorized to access this route\\` });\n        }\n        next();\n    };\n};\n`.trim();\n                fs.writeFileSync(path.join(srcPath, 'middlewares', `auth.middleware.${fileExtension}`), authMiddlewareContent);\n            }\n        };\n\n        try {\n            createFolders();\n            createFiles();\n            vscode.window.showInformationMessage(`✅ Express backend boilerplate for \"${projectName}\" generated!`);\n\n            // Install dependencies\n            const terminal = vscode.window.createTerminal(`Install Dependencies (${packageManager})`);\n            terminal.show();\n            terminal.sendText(`${packageManager} install`);\n            terminal.sendText(`exit`); // Close terminal after command\n\n            vscode.window.showInformationMessage(`Dependencies are being installed with ${packageManager}.`);\n\n            // Suggest next steps\n            const openReadme = 'Open README.md';\n            const showExplorer = 'Show in Explorer';\n            vscode.window.showInformationMessage(\n                `Your Express.js backend is ready!`,\n                openReadme,\n                showExplorer\n            ).then(selection => {\n                if (selection === openReadme) {\n                    vscode.workspace.openTextDocument(path.join(rootPath, 'README.md')).then(doc => {\n                        vscode.window.showTextDocument(doc);\n                    });\n                } else if (selection === showExplorer) {\n                    vscode.commands.executeCommand('revealFileInOS', vscode.Uri.file(rootPath));\n                }\n            });\n\n\n        } catch (err: any) { // Type 'any' for error to access message property\n            vscode.window.showErrorMessage(`❌ Error creating boilerplate: ${err.message}`);\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nexport function deactivate() { }","module.exports = require(\"fs\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["module","exports","require","context","disposable","vscode","commands","registerCommand","async","workspaceFolders","workspace","length","window","showErrorMessage","rootPath","uri","fsPath","projectName","showInputBox","prompt","placeHolder","value","path","basename","showInformationMessage","packageManager","showQuickPick","canPickMany","moduleSystem","useESModules","fileExtension","packageJsonType","includeAuth","undefined","withAuth","srcPath","join","folders","forEach","folder","fs","mkdirSync","recursive","appJsContent","trim","writeFileSync","serverJsContent","dbJsContent","envContent","toLowerCase","replace","readmeContent","generatedPackageJsonDependencies","packageJsonContent","userModelContent","exampleControllerContent","exampleRouteContent","authControllerContent","authRouteContent","authMiddlewareContent","createFiles","terminal","createTerminal","show","sendText","openReadme","showExplorer","then","selection","openTextDocument","doc","showTextDocument","executeCommand","Uri","file","err","message","subscriptions","push","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}